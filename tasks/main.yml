---
  - name: Install mariadb
    become: True
    apt:
      name:
        - mariadb-server
        - mariadb-client
        - mariadb-common
        - python-mysqldb
        - python3-pymysql
        - galera-3
        - mariadb-backup
      state: present
      update_cache: True
      cache_valid_time: 1800

  # Step 1: For multi-instance mariadb, we use the systemd generator (mariadb@),
  # which requires the other ways to start the service (mysql, mariadb) to be
  # disabled. The 'old' (default) instance can then be started with mariadb@sql.
  - name: Load service status
    become: True
    service_facts:

  - name: Check whether 'old' service is running
    set_fact:
      oldsvc: True
    when: ('mysql.service' in services and services['mysql.service'].state == 'running') or ('mariadb.service' in services and services['mariadb.service'].state == 'running')

  - name: Disable and stop old services
    when: oldsvc|default(False)
    become: True
    service:
      name: "{{ item }}"
      state: stopped
      enabled: no
    with_items:
      - mysql.service
      - mariadb.service

  - name: Enable new service for old database
    when: oldsvc|default(False)
    become: True
    service:
      name: "{{ item }}"
      state: started
      enabled: yes
    with_items:
      - 'mariadb@sql.service'

  # Step 2: Configure prereqs
  - name: Create HAProxy dropin
    become: True
    template:
      src: haproxy-dropin.j2
      dest: /etc/haproxy/conf.d/30-mariadb-galera.conf
      owner: root
      group: root
      mode: 0644
    register: hapchanged

  - name: Concat client certificate
    become: True
    shell: cat /etc/haproxy/mdb-cl.crt /etc/haproxy/mdb-cl.key > /etc/haproxy/mdb-client-full.pem && chown 600 /etc/haproxy/mdb-client-full.pem
    changed_when: False

  - name: Concat server certificate
    become: True
    shell: cat /etc/haproxy/mdb-sv.crt /etc/haproxy/mdb-sv.key > /etc/haproxy/mdb-server-full.pem && chown 600 /etc/haproxy/mdb-server-full.pem
    changed_when: False

  - name: Restart HAProxy
    when: hapchanged.changed
    become: True
    service:
      name: haproxy
      state: restarted

  - name: Create MariaDB Galera config file
    become: True
    template:
      src: mysqld.conf.j2
      dest: /etc/mysql/conf.d/mygalera.cnf
      owner: root
      group: root
      mode: 0644
    register: confchanged

  - name: Check whether data directory exists
    become: True
    stat:
      path: /var/lib/mysql-ha
    register: datadir

  - name: Create initial data directory
    become: True
    when: not datadir.stat.exists
    command: mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql-ha

  - name: Ensure that tempdir is created after each boot
    become: True
    template:
      src: tmpfiles.conf.j2
      dest: /etc/tmpfiles.d/mysql-ha.conf
      owner: root
      group: root
      mode: 0644
    notify: restart tmpfiles

  - name: Install custom mariadbackup SST handler
    become: True
    template:
      src: wsrep_sst_mariabackup.j2
      dest: /usr/bin/wsrep_sst_mariabackup_cust
      owner: root
      group: root
      mode: 0755

  - name: Create systemd dropin directory
    become: True
    file:
      path: /etc/systemd/system/mariadb@galera.service.d
      state: directory
      owner: root
      group: root
      mode: 0755

  - name: Create systemd dropin
    become: True
    template:
      src: dropin.j2
      dest: /etc/systemd/system/mariadb@galera.service.d/ansible.conf
      owner: root
      group: root
      mode: 0644
    notify: reload systemd

  - name: Remove all anonymous accounts
    become: True
    mysql_user:
      name: ''
      host_all: "yes"
      login_host: "127.44.0.1"
      login_port: "4307"
      state: absent
      config_file: /root/.my-ha.cnf
    ignore_errors: True

  - name: Set MariaDB root password
    mysql_user:
      name: root
      password: "{{ mariadb_ha_root_password }}"
      host_all: yes
      login_host: "127.44.0.1"
      login_port: "4307"
      config_file: /root/.my-ha.cnf
    ignore_errors: True

  - name: Update root's stored mariadb password
    template:
      src: my.cnf.user.j2
      dest: /root/.my-ha.cnf
      owner: root
      group: root
      mode: 0640
    ignore_errors: True

  - name: Create backup user
    mysql_user:
      name: dump
      password: "{{ mariadb_ha_dump_password }}"
      host_all: no
      host: localhost
      priv: "*.*:PROCESS,RELOAD,LOCK TABLES,REPLICATION CLIENT"
      login_host: "127.44.0.1"
      login_port: "4307"
      config_file: /root/.my-ha.cnf
    ignore_errors: True

  - meta: flush_handlers

  # Galera clusters are _not_ reboot-safe. Have the user bootstrap the new cluster, just in case...
  - pause:
      prompt: "No running MariaDB server detected. Please consult the README on how to start one and press <ENTER> to continue"
    when: not (hostvars|any_running(groups[mariadb_ha_group], 'mariadb@galera.service'))

  - name: Create databases
    become: True
    with_items: "{{ mariadb_ha_databases }}"
    mysql_db:
      name: "{{ item.name }}"
      login_host: "127.44.0.1"
      login_port: "4307"
      config_file: /root/.my-ha.cnf
    ignore_errors: True

  - name: Create users
    become: True
    with_items: "{{ mariadb_ha_databases }}"
    mysql_user:
      name: "{{ item.user }}"
      password: "{{ item.password }}"
      priv: "{{ item.name }}.*:ALL"
      login_host: "127.44.0.1"
      login_port: "4307"
      config_file: /root/.my-ha.cnf
    ignore_errors: True

  # At this point, one correctly configured node is guaranteed to be running.
  # Restart the other nodes if necessary
  - name: Start mariadb
    service:
      name: 'mariadb@galera'
      state: started
      enabled: yes
